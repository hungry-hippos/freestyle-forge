[{"C:\\Users\\thisi\\Desktop\\github repos\\freestyle-forge\\src\\index.js":"1","C:\\Users\\thisi\\Desktop\\github repos\\freestyle-forge\\src\\App.js":"2","C:\\Users\\thisi\\Desktop\\github repos\\freestyle-forge\\src\\reportWebVitals.js":"3","C:\\Users\\thisi\\Desktop\\github repos\\freestyle-forge\\src\\appFiles\\TextEditor.js":"4","C:\\Users\\thisi\\Desktop\\github repos\\freestyle-forge\\src\\appFiles\\HUD.js":"5","C:\\Users\\thisi\\Desktop\\github repos\\freestyle-forge\\src\\appFiles\\Navbar.js":"6","C:\\Users\\thisi\\Desktop\\github repos\\freestyle-forge\\src\\appFiles\\Home.js":"7","C:\\Users\\thisi\\Desktop\\github repos\\freestyle-forge\\src\\appFiles\\keyboardFunctionalityWordLab.js":"8","C:\\Users\\thisi\\Desktop\\github repos\\freestyle-forge\\src\\appFiles\\FlowEditor.js":"9","C:\\Users\\thisi\\Desktop\\github repos\\freestyle-forge\\src\\appFiles\\keyboardFunctionalityFlow.js":"10","C:\\Users\\thisi\\Desktop\\github repos\\freestyle-forge\\src\\appFiles\\gameFunctionality.js":"11","C:\\Users\\thisi\\Desktop\\github repos\\freestyle-forge\\src\\appFiles\\verseBank.js":"12","C:\\Users\\thisi\\Desktop\\github repos\\freestyle-forge\\src\\appFiles\\FlowHUD.js":"13"},{"size":500,"mtime":499162500000,"results":"14","hashOfConfig":"15"},{"size":1029,"mtime":1612915559462,"results":"16","hashOfConfig":"15"},{"size":362,"mtime":499162500000,"results":"17","hashOfConfig":"15"},{"size":1344,"mtime":1612913661640,"results":"18","hashOfConfig":"15"},{"size":5523,"mtime":1612667798958,"results":"19","hashOfConfig":"15"},{"size":1518,"mtime":1612914994906,"results":"20","hashOfConfig":"15"},{"size":2956,"mtime":1612915478287,"results":"21","hashOfConfig":"15"},{"size":16010,"mtime":1612668014065,"results":"22","hashOfConfig":"15"},{"size":1334,"mtime":1612913703171,"results":"23","hashOfConfig":"15"},{"size":3196,"mtime":1612725777197,"results":"24","hashOfConfig":"15"},{"size":12314,"mtime":1612913848665,"results":"25","hashOfConfig":"15"},{"size":479,"mtime":1612914354865,"results":"26","hashOfConfig":"15"},{"size":498,"mtime":1612908911665,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"1q0vo51",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"30"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"30"},"C:\\Users\\thisi\\Desktop\\github repos\\freestyle-forge\\src\\index.js",[],["57","58"],"C:\\Users\\thisi\\Desktop\\github repos\\freestyle-forge\\src\\App.js",[],"C:\\Users\\thisi\\Desktop\\github repos\\freestyle-forge\\src\\reportWebVitals.js",[],"C:\\Users\\thisi\\Desktop\\github repos\\freestyle-forge\\src\\appFiles\\TextEditor.js",[],"C:\\Users\\thisi\\Desktop\\github repos\\freestyle-forge\\src\\appFiles\\HUD.js",[],"C:\\Users\\thisi\\Desktop\\github repos\\freestyle-forge\\src\\appFiles\\Navbar.js",[],"C:\\Users\\thisi\\Desktop\\github repos\\freestyle-forge\\src\\appFiles\\Home.js",[],"C:\\Users\\thisi\\Desktop\\github repos\\freestyle-forge\\src\\appFiles\\keyboardFunctionalityWordLab.js",[],"C:\\Users\\thisi\\Desktop\\github repos\\freestyle-forge\\src\\appFiles\\FlowEditor.js",[],"C:\\Users\\thisi\\Desktop\\github repos\\freestyle-forge\\src\\appFiles\\keyboardFunctionalityFlow.js",[],"C:\\Users\\thisi\\Desktop\\github repos\\freestyle-forge\\src\\appFiles\\gameFunctionality.js",["59","60","61"],"import verseBank from './verseBank.js'\r\n\r\nvar gameFunctionality={\r\n    isWordsMoving:false,\r\n    firstVerse:'',\r\n    firstVerseChar:0,\r\n    intervalCode:0,\r\n    moveIntervalCode:0,\r\n    getLastWord(){\r\n        const allWords=document.getElementsByClassName('flowWord');\r\n        return allWords[allWords.length-1].textContent;\r\n    },\r\n    typeFirstVerse(){\r\n        gameFunctionality.intervalCode=setInterval(()=>{\r\n            while(gameFunctionality.firstVerseChar<gameFunctionality.firstVerse.length){\r\n                if (gameFunctionality.firstVerse[gameFunctionality.firstVerseChar]===\" \"){\r\n                    const evt = new KeyboardEvent('keydown', {code:\"Space\"}); \r\n                    window.dispatchEvent(evt);\r\n                }else{\r\n                    const evt = new KeyboardEvent('keydown', {key:gameFunctionality.firstVerse[gameFunctionality.firstVerseChar]}); \r\n                    window.dispatchEvent(evt);\r\n                }\r\n                \r\n                gameFunctionality.firstVerseChar++;\r\n                break; \r\n            }\r\n            if (gameFunctionality.firstVerseChar==gameFunctionality.firstVerse.length){\r\n                var evt = new KeyboardEvent('keydown', {code:'Enter'}); \r\n                window.dispatchEvent(evt);\r\n                clearInterval(gameFunctionality.intervalCode);\r\n                gameFunctionality.firstVerseChar=0;\r\n                gameFunctionality.getRootRhymes(); \r\n            }\r\n        },50)\r\n        \r\n        \r\n    },\r\n    eraseLastWord(){\r\n        var allWords=document.getElementsByClassName('flowWord');\r\n        allWords[allWords.length-1].textContent='';\r\n    },\r\n    getLongWords(){\r\n        var allWords=document.getElementsByClassName('flowWord');\r\n        var longWords=[];\r\n        for (var i=0;i<allWords.length;i++){\r\n            if (allWords[i].textContent.length>=4){\r\n                longWords.push(allWords[i]);\r\n            }\r\n        }\r\n        return longWords;\r\n    },\r\n    shuffleArr(arr){\r\n        for (var i=0;i<arr.length;i++){\r\n            const num=Math.round(Math.random()*(arr.length-1));\r\n            var temp=arr[i];\r\n            arr[i]=arr[num];\r\n            arr[num]=temp;\r\n        }\r\n        return arr;\r\n    },\r\n    async getAPIData(type,wordPtr){\r\n\r\n        switch(type){\r\n            case \"rhyme\":\r\n                type=\"rel_rhy=\";\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        var data=[];\r\n        fetch(\"https://api.datamuse.com/words?\"+type+wordPtr.textContent)\r\n            .then(res=>res.json())\r\n            .then((res)=>{\r\n                for (let i=0;i<res.length;i++){\r\n                    data.push(res[i].word);\r\n                }\r\n                return data;\r\n            })\r\n            .then((res)=>{\r\n                if (res.length>5){\r\n                    //if all lanes are full...\r\n                    if (document.getElementsByClassName('rhymeLane').length>=3)\r\n                        return;\r\n\r\n                    //avoiding duplicate root words...\r\n                    var allLanes=document.getElementsByClassName('rhymeLane');\r\n                    for (var i=0;i<allLanes.length;i++){\r\n                        if (allLanes[i].childNodes[0].textContent===wordPtr.textContent)\r\n                            return;\r\n                    }\r\n\r\n                    //choosing a radnom set of rhymes to include in stack\r\n                    const num=Math.round(Math.random()*4)+3;\r\n                    var rhymeWords=[];\r\n                    for (var i=0;i<num;i++){\r\n                        rhymeWords.push(res[i]);\r\n                    }\r\n                    \r\n                    //creating n appending root rhyme on HUD left end\r\n                    const containerDiv=document.createElement('div');\r\n                    containerDiv.classList.add('rhymeLane');\r\n                    const wordDiv=document.createElement('div');\r\n                    wordDiv.classList.add('rootWord');\r\n                    wordDiv.textContent=wordPtr.textContent;\r\n                    const lengthDiv=document.createElement('div');\r\n                    lengthDiv.classList.add('rootWord');\r\n                    lengthDiv.textContent=rhymeWords.length;\r\n                    containerDiv.appendChild(wordDiv)\r\n                    containerDiv.appendChild(lengthDiv);\r\n                    document.getElementById('rhymeLanes').appendChild(containerDiv);\r\n\r\n                    const lanes=document.getElementsByClassName('rhymeLane');\r\n                    if (lanes.length===1){\r\n                        containerDiv.classList.add('greenLane');\r\n                        wordPtr.classList.add('greenLane');\r\n                    }else if (lanes.length===2){\r\n                        containerDiv.classList.add('redLane');\r\n                        wordPtr.classList.add('redLane');\r\n                    }else if (lanes.length===3){\r\n                        containerDiv.classList.add('blueLane');\r\n                        wordPtr.classList.add('blueLane');\r\n                    }\r\n\r\n                    //creating n appending rhyme w/ root rhyme on stack\r\n                    for (var i=0;i<rhymeWords.length;i++){\r\n                        const rhymePair=document.createElement('div');\r\n                        rhymePair.classList.add('stackPair');\r\n                        const stackRhyme=document.createElement('div');\r\n                        stackRhyme.classList.add('stackRhyme');\r\n                        stackRhyme.textContent=rhymeWords[i];\r\n                        const stackRoot=document.createElement('div');\r\n                        stackRoot.classList.add('stackRoot');\r\n                        stackRoot.textContent=wordPtr.textContent;\r\n\r\n                        rhymePair.appendChild(stackRhyme);\r\n                        rhymePair.appendChild(stackRoot);\r\n                        document.getElementById('rhymesStack').appendChild(rhymePair);\r\n                    }\r\n\r\n                    wordPtr.classList.add('bold');\r\n\r\n                }\r\n            })\r\n    },\r\n    getRootRhymes(){\r\n        var longWords=gameFunctionality.getLongWords();\r\n        longWords=gameFunctionality.shuffleArr(longWords);\r\n        for (var i=0;i<longWords.length;i++){\r\n            gameFunctionality.getAPIData(\"rhyme\",longWords[i]);                \r\n        }\r\n    },\r\n    moveFromStackToLane(){\r\n        var rhymePairs=document.getElementsByClassName('stackPair');\r\n        if (rhymePairs.length===0){\r\n            clearInterval(gameFunctionality.intervalCode);\r\n            return;\r\n        }\r\n\r\n        //pop random word pair form stack\r\n        const num=Math.round(Math.random()*(rhymePairs.length-1));\r\n        const rhyme=rhymePairs[num].childNodes[0].textContent;\r\n        const root=rhymePairs[num].childNodes[1].textContent;\r\n        rhymePairs[num].remove();\r\n\r\n        //find out which lane it belongs to, append it to right lane\r\n        const rhymeLanes=document.getElementsByClassName('rhymeLane');\r\n        for (var i=0;i<rhymeLanes.length;i++){\r\n            if (rhymeLanes[i].childNodes[0].textContent===root){\r\n                var freq=parseInt(rhymeLanes[i].childNodes[1].textContent,10)-1;\r\n                rhymeLanes[i].childNodes[1].textContent=freq;\r\n                const runningWord=document.createElement('div');\r\n                runningWord.textContent=rhyme;\r\n                runningWord.classList.add('runningWord');\r\n                rhymeLanes[i].appendChild(runningWord);\r\n\r\n                //adding lane color to word\r\n                var laneColor=\"\";\r\n                if (rhymeLanes[i].classList.contains('redLane')){\r\n                    laneColor='redLane';\r\n                }else if (rhymeLanes[i].classList.contains('blueLane')){\r\n                    laneColor='blueLane';\r\n                }else if (rhymeLanes[i].classList.contains('greenLane')){\r\n                    laneColor='greenLane';\r\n                }\r\n                runningWord.classList.add(laneColor);\r\n                runningWord.setAttribute('laneColor',laneColor);\r\n                break;\r\n            }\r\n        }\r\n    },\r\n    moveWords(){\r\n        if (gameFunctionality.isWordsMoving){\r\n            return;\r\n        }else{\r\n            gameFunctionality.isWordsMoving=true;\r\n        }\r\n\r\n        gameFunctionality.moveIntervalCode=setInterval(()=>{\r\n            var allRunners=document.getElementsByClassName('runningWord');\r\n            var i=0;\r\n            while(i<allRunners.length){\r\n                var posLeft=parseInt(allRunners[i].offsetLeft,10);\r\n                var posRight=1200-posLeft-allRunners[i].offsetWidth;\r\n                if (posRight<=40){\r\n                    allRunners[i].remove();\r\n                    continue;\r\n                }\r\n                posLeft+=1;\r\n                allRunners[i].style.left=posLeft+'px';\r\n                i++;\r\n            }\r\n            //if you have emptied stack and all runningWords, reload root rhymes and stack\r\n            const stackPairs=document.getElementsByClassName('stackPair');\r\n            if (allRunners.length===0 && stackPairs.length===0){\r\n                clearInterval(gameFunctionality.moveIntervalCode);\r\n                gameFunctionality.isWordsMoving=false;\r\n                gameFunctionality.reloadRootRhymesAndStack();\r\n            }\r\n        },20)\r\n    },\r\n    reloadRootRhymesAndStack(){\r\n        //empty all lanes\r\n        var lanes=document.getElementsByClassName('rhymeLane');\r\n        while(lanes.length>0){\r\n            lanes[0].remove();\r\n        }\r\n\r\n        //clear movefromstacktolane interval\r\n        clearInterval(gameFunctionality.intervalCode);\r\n\r\n        //load new rhymes in lanes and stack, await a bit, then start moving them move stack to lanes\r\n        gameFunctionality.getRootRhymes();\r\n        setTimeout(()=>{\r\n            gameFunctionality.startWordSpawnInterval();\r\n            gameFunctionality.moveWords();\r\n        },3000);\r\n    },\r\n    startWordSpawnInterval(){\r\n        //no delay for first word\r\n        gameFunctionality.moveFromStackToLane();\r\n        gameFunctionality.moveWords();\r\n\r\n        gameFunctionality.intervalCode=setInterval(()=>{\r\n            const num=Math.round(Math.random()*2)*1000;\r\n            setTimeout(()=>{\r\n                const stackPair=document.getElementsByClassName('stackPair');\r\n                if (stackPair.length===0){\r\n                    clearInterval(gameFunctionality.intervalCode);\r\n                    gameFunctionality.intervalCode=0;\r\n                    return;\r\n                }\r\n\r\n                gameFunctionality.moveFromStackToLane();\r\n            },num)\r\n        },3000)\r\n    },\r\n    listener(event){\r\n        const lastWord=gameFunctionality.getLastWord();\r\n        if (lastWord==='LOAD'){\r\n            gameFunctionality.eraseLastWord();\r\n            const num=Math.round(Math.random()*(verseBank.length-1));\r\n            gameFunctionality.firstVerse=verseBank[num];\r\n            gameFunctionality.typeFirstVerse();\r\n        }\r\n        if (lastWord==='GO'){\r\n            gameFunctionality.eraseLastWord();\r\n            gameFunctionality.startWordSpawnInterval();\r\n        }\r\n        const runningWords=document.getElementsByClassName('runningWord');\r\n        for (var i=0;i<runningWords.length;i++){\r\n            if (lastWord===runningWords[i].textContent){\r\n                //getting color lane from running word, adding it to the word on editor\r\n                const laneColor=runningWords[i].getAttribute('laneColor');\r\n                const allWords=document.getElementsByClassName('flowWord');\r\n                allWords[allWords.length-1].classList.add(laneColor);\r\n                allWords[allWords.length-1].classList.add('bold');\r\n\r\n                //deleting running word from HUD\r\n                runningWords[i].remove();\r\n            }\r\n        }\r\n\r\n\r\n        \r\n    },\r\n    loadListener(){\r\n        window.addEventListener('keydown',gameFunctionality.listener);\r\n    },\r\n    resetEverything(){\r\n        clearInterval(gameFunctionality.intervalCode);\r\n        clearInterval(gameFunctionality.moveIntervalCode);\r\n        window.removeEventListener(\"keydown\",gameFunctionality.listener);\r\n        gameFunctionality.isWordsMoving=false;\r\n        gameFunctionality.firstVerse=\"\";\r\n        gameFunctionality.firstVerseChar=0;\r\n    }\r\n}\r\n\r\nexport default gameFunctionality","C:\\Users\\thisi\\Desktop\\github repos\\freestyle-forge\\src\\appFiles\\verseBank.js",[],"C:\\Users\\thisi\\Desktop\\github repos\\freestyle-forge\\src\\appFiles\\FlowHUD.js",["62"],"import React, { useEffect } from 'react'\r\nimport './FlowHUD.css'\r\n\r\nconst FlowHUD=()=>{\r\n\r\n    return <React.Fragment>\r\n    <div id='flowHUD'>\r\n        <div id='rootRhymesEnd'>\r\n            <h2 style={{fontSize:'20px',textAlign:'center',marginBottom:'15px'}}>ROOT RHYMES</h2>\r\n        </div>\r\n        <div id='rhymeLanes'></div>\r\n        <div id='finishEnd'>\r\n        </div>\r\n    </div>\r\n    < div id='rhymesStack' className='hidden'>\r\n    </div>\r\n    </React.Fragment>\r\n}\r\n\r\nexport default FlowHUD",{"ruleId":"63","replacedBy":"64"},{"ruleId":"65","replacedBy":"66"},{"ruleId":"67","severity":1,"message":"68","line":27,"column":49,"nodeType":"69","messageId":"70","endLine":27,"endColumn":51},{"ruleId":"71","severity":1,"message":"72","line":95,"column":30,"nodeType":"73","messageId":"74","endLine":95,"endColumn":31},{"ruleId":"71","severity":1,"message":"72","line":125,"column":30,"nodeType":"73","messageId":"74","endLine":125,"endColumn":31},{"ruleId":"75","severity":1,"message":"76","line":1,"column":17,"nodeType":"73","messageId":"77","endLine":1,"endColumn":26},"no-native-reassign",["78"],"no-negated-in-lhs",["79"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-redeclare","'i' is already defined.","Identifier","redeclared","no-unused-vars","'useEffect' is defined but never used.","unusedVar","no-global-assign","no-unsafe-negation"]